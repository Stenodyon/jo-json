aspect Json {

	public static JsonUnknown JsonUnknown.INSTANCE = new JsonUnknown();

	public JsonNumber.JsonNumber(long value) {
		this(Long.toString(value));
	}

	public JsonNumber.JsonNumber(double value) {
		this(Double.toString(value));
	}

	/**
	 * Retrieves the value of a member in this JSON object.
	 * @param name the name to search for
	 * @return the JSON member value for the first member with the given name
	 */
	syn JsonValue JsonObject.get(String name) {
		for (JsonMember member: getMemberList()) {
			if (member.getName().equals(name)) {
				return member.getValue();
			}
		}
		return JsonUnknown.INSTANCE;
	}

	/**
	 * Modify first member with the given name, or add a new member.
	 * @param name
	 * @param value
	 */
	public void JsonObject.set(String name, JsonValue value) {
		for (int i = 0; i < getNumMember(); ++i) {
			if (getMember(i).getName().equals(name)) {
				getMember(i).setValue(value);
				return;
			}
		}
		add(name, value);
	}

	syn boolean JsonObject.hasMember(String name) {
		for (JsonMember member: getMemberList()) {
			if (member.getName().equals(name)) {
				return true;
			}
		}
		return false;
	}

	syn boolean JsonValue.isUnknown() = false;
	eq JsonUnknown.isUnknown() = true;

	syn JsonObject JsonValue.object() = new JsonObject();
	eq JsonObject.object() = this;

	syn JsonArray JsonValue.array() = new JsonArray();
	eq JsonArray.array() = this;

	/**
	 * Add a member to the Json object.
	 * @param name
	 * @param value
	 */
	public void JsonObject.add(String name, JsonValue value) {
		if (value != null) {
			addMember(new JsonMember(ASTNode.escape(name), value));
		}
	}

	public void JsonObject.add(String name, String value) {
		add(name, new JsonString(value));
	}

	public void JsonObject.add(String name, long value) {
		add(name, new JsonNumber(value));
	}

	public void JsonObject.add(String name, double value) {
		add(name, new JsonNumber(value));
	}

	public void JsonObject.add(String name, boolean value) {
		add(name, value ? new JsonTrue() : new JsonFalse());
	}

	public void JsonArray.add(JsonValue element) {
		addElement(element);
	}

	public void JsonArray.add(String value) {
		addElement(new JsonString(value));
	}

	public void JsonArray.add(long value) {
		addElement(new JsonNumber(value));
	}

	public void JsonArray.add(double value) {
		addElement(new JsonNumber(value));
	}

	public void JsonArray.add(boolean value) {
		addElement(value ? new JsonTrue() : new JsonFalse());
	}

	public JsonValue JsonArray.get(int index) {
		if (index < getNumElement() && index >= 0) {
			return getElement(index);
		} else {
			return JsonUnknown.INSTANCE;
		}
	}

	/**
	 * @param undefined value returned if this is not a JSON string.
	 * @return the JSON string value
	 */
	syn String JsonValue.stringValue(String undefined) = undefined;
	eq JsonString.stringValue(String undefined) = getValue();

	/**
	 * @param undefined value returned if this is not a JSON number.
	 * @return the JSON number value
	 */
	syn int JsonValue.intValue(int undefined) = undefined;
	eq JsonNumber.intValue(int undefined) = Integer.valueOf(getValue());

	/**
	 * @param undefined value returned if this is not a JSON number.
	 * @return the JSON number value
	 */
	syn long JsonValue.longValue(long undefined) = undefined;
	eq JsonNumber.longValue(long undefined) = Long.valueOf(getValue());

	/**
	 * @param undefined value returned if this is not a JSON number.
	 * @return the JSON number value
	 */
	syn float JsonValue.floatValue(float undefined) = undefined;
	eq JsonNumber.floatValue(float undefined) = Float.valueOf(getValue());

	/**
	 * @param undefined value returned if this is not a JSON number.
	 * @return the JSON number value
	 */
	syn double JsonValue.doubleValue(double undefined) = undefined;
	eq JsonNumber.doubleValue(double undefined) = Double.valueOf(getValue());

	/**
	 * @param undefined value returned if this is not a JSON number.
	 * @return the JSON number value
	 */
	syn boolean JsonValue.boolValue(boolean undefined) = undefined;
	eq JsonTrue.boolValue(boolean undefined) = true;
	eq JsonFalse.boolValue(boolean undefined) = false;

	/**
	 * Produce a compact string representation of this JSON object.
	 * @return compact string
	 */
	public abstract String JsonValue.toCompactString();

	public String JsonUnknown.toCompactString() {
		return "\"<unknown value>\"";
	}

	public String JsonMember.toCompactString() {
		return "\"" + getName() + "\":" + getValue().toCompactString();
	}

	public String JsonTrue.toCompactString() {
		return "true";
	}

	public String JsonFalse.toCompactString() {
		return "false";
	}

	public String JsonNull.toCompactString() {
		return "null";
	}

	public String JsonNumber.toCompactString() {
		return getValue();
	}

	public String JsonString.toCompactString() {
		return "\"" + getValue() + "\"";
	}

	public String JsonObject.toCompactString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{");
		boolean first = true;
		for (JsonMember member: getMemberList()) {
			if (!first) {
				sb.append(",");
			}
			first = false;
			sb.append(member.toCompactString());
		}
		sb.append("}");
		return sb.toString();
	}

	public String JsonArray.toCompactString() {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		boolean first = true;
		for (JsonValue element: getElementList()) {
			if (!first) {
				sb.append(",");
			}
			first = false;
			sb.append(element.toCompactString());
		}
		sb.append("]");
		return sb.toString();
	}

	@Override
	public String JsonMember.toString() {
		return "\"" + getName() + "\" : " + getValue().toString();
	}

	@Override
	public String JsonTrue.toString() {
		return "true";
	}

	@Override
	public String JsonFalse.toString() {
		return "false";
	}

	@Override
	public String JsonNull.toString() {
		return "null";
	}

	@Override
	public String JsonNumber.toString() {
		return getValue();
	}

	@Override
	public String JsonString.toString() {
		return "\"" + getValue() + "\"";
	}

	@Override
	public String JsonObject.toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{ ");
		boolean first = true;
		for (JsonMember member: getMemberList()) {
			if (!first) {
				sb.append(", ");
			}
			first = false;
			sb.append(member.toString());
		}
		sb.append(" }");
		return sb.toString();
	}

	@Override
	public String JsonArray.toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("[ ");
		boolean first = true;
		for (JsonValue element: getElementList()) {
			if (!first) {
				sb.append(", ");
			}
			first = false;
			sb.append(element.toString());
		}
		sb.append(" ]");
		return sb.toString();
	}

}
